#!/usr/bin/perl
use LWP::Simple;
use Data::Dumper;
use DBI;
use IO::Handle;

# =========================================
# Pool SQL script generator
# Note, your DB must hold zone and area IDs
# as obtained with config options:
# Calculate.Creature.Zone.Area.Data = 1
# Calculate.Gameoject.Zone.Area.Data = 1
# =========================================

	# Load config from include
	my %config = do './poolgen.conf';

	my $argCount = @ARGV;
	if ($argCount ne 6)
	{
		print "TrinityCore poolgen.\n";
		print "Usage:\n";
		print "poolgen <Mode> <MapID> <PoolID> <ZoneID> <Entry> <FirstSpawnID>\n";
		print "Mode is 0 for Creature, 1 for GameObject";
		exit(1);
	}

	# Arguments
	my ($modeId, $mapId, $poolId, $zoneId, $entry, $firstSpawn) = @ARGV;

	# Verify mode ID
	if ($modeId ne 0 && $modeId ne 1)
	{
		die "Invalid mode, choose 0 for Creature and 1 for GameObject";
	}

	# Connect to SQL
	my $cnSQL = DBI->connect("DBI:mysql:$config{dbName};host=$config{dbServ}", $config{dbUser}, $config{dbPass}) || die "Failed to connect to MYSQL database $DBI::errstr";

	# Check pool doesn't exist
	my $sqlQuery = "SELECT poolId FROM mappool_template WHERE map = ? AND poolId = ?";
	my $sqlHandle = $cnSQL->prepare($sqlQuery);
	$sqlHandle->execute($mapId, $poolId);
	if (my @row = $sqlHandle->fetchrow_array)
	{
		$sqlHandle->finish;
		die "Pool $poolId already exists for map $mapId";
	}
	$sqlHandle->finish;

	# Check object entry exists (and get name if so)
	if ($modeId eq 1)
	{
		$sqlQuery = "SELECT name FROM gameobject_template WHERE entry = ?";
	}
	else
	{
		$sqlQuery = "SELECT name FROM creature_template WHERE entry = ?";
	}
	$sqlHandle = $cnSQL->prepare($sqlQuery);
	$sqlHandle->execute($entry);
	my $objName = "";
	if (my @row = $sqlHandle->fetchrow_array)
	{
		$objName = $row[0];
	}
	else
	{
		die "Entry $entry does not exist!";
	}

	# Fetch objects
	my @objRows;
	if ($modeId eq 1)
	{
		$sqlQuery = "SELECT guid, map, position_x, position_y, position_z, orientation, rotation0, rotation1, rotation2, rotation3 FROM gameobject go WHERE go.map = ? AND go.zoneId = ? AND go.id = ?";
	}
	elsif ($modeId eq 0)
	{
		$sqlQuery = "SELECT guid, map, position_x, position_y, position_z, orientation FROM creature WHERE map = ? AND zoneId = ? AND id = ?";
	}
	$sqlHandle = $cnSQL->prepare($sqlQuery);
	$sqlHandle->execute($mapId, $zoneId, $entry);
	while (my @row = $sqlHandle->fetchrow_array)
	{
		#print "Guid: @row[0], (@row[1], @row[2], @row[3])\n";
		push(@objRows, [@row]);
	}
	$sqlHandle->finish;

	if (@objRows eq 0)
	{
		die "No objects found with given parameters";
	}

	# Add script header
	print "/* THIS SQL SCRIPT WAS AUTO-GENERATED BY TRINITCORE POOLGEN\n";
	print "   Please ensure you adjust the pool template entry accordingly */\n\n";

	# Begin SQL transaction
	print "START TRANSACTION;\n\n";

	# Create Pool record
	print "/* Create Pool Template, update applicable settings (specifically minLimit, MaxLimit and description) */\n";
	print "INSERT INTO mappool_template\n";
	print "(map, poolId, poolType, phaseMask, spawnMask, minLimit, maxLimit, MovementType, spawnDist, spawntimeSecsMin, spawntimeSecsMax, spawntimeSecsFast, corpsetimeSecsLoot, corpsetimeSecsNoLoot, description) VALUES\n";
	print "($mapId, $poolId, $modeId, 1, 1, 5, 10, 0, 0, 0, 0, 0, 0, 0, '*CHANGEME* $objName');\n\n";

	# Create spawn points
	print "/* Create spawn points */\n";
	print "INSERT INTO mappool_spawnpoints\n";
	print "(map, pointId, positionX, positionY, positionZ, orientation, rotation0, rotation1, rotation2, rotation3) VALUES\n";
	my $nextPoint = $firstSpawn;
	my $lastRow = "";
	for my $row (@objRows)
	{
		if ($lastRow ne "")
		{
			print "$lastRow,\n";
		}
		if ($modeId eq 1)
		{
			$lastRow = "($mapId, ".$nextPoint++.", $row->[2], $row->[3], $row->[4], $row->[5], $row->[6], $row->[7], $row->[8], $row->[9])";
		}
		elsif ($modeId eq 0)
		{
			$lastRow = "($mapId, ".$nextPoint++.", $row->[2], $row->[3], $row->[4], $row->[5], 0, 0, 0, 0)";
		}
	}
	print "$lastRow;\n\n";
	$lastRow = "";

	# Create spawn entries
	print "/* Create spawn references */\n";
	print "INSERT INTO mappool_spawns\n";
	print "(map, poolId, pointId) VALUES\n";
	my $nextPoint = $firstSpawn;
	my $lastRow = "";
	for my $row (@objRows)
	{
		if ($lastRow ne "")
		{
			print "$lastRow,\n";
		}
		$lastRow = "($mapId, $poolId, ".$nextPoint++.")";
	}
	print "$lastRow;\n\n";
	$lastRow = "";

	# Create object entry
	print "/* Create object reference */\n";
	if ($modeId eq 1)
	{
		print "INSERT INTO mappool_gameobject\n";
		print "(map, poolId, entry, chance, animProgress, state) VALUES\n";
		print "($mapId, $poolId, $entry, 0, 0, 0);\n";
	}
	elsif ($modeId eq 0)
	{
		# This needs to be updated
		print "INSERT INTO mappool_creature\n";
		print "(map, poolId, entry, chance, modelId, equipmentId, currentWaypoint, curHealth, curMana, npcFlag, unitFlags, dynamicFlags) VALUES\n";
		print "($mapId, $poolId, $entry, 0, 0, 0);\n\n";
	}

	# Delete old pool entries for this
	print "/* Delete old pool entries linked to this entry */\n";
	if ($modeId eq 1)
	{
		print "DELETE FROM pool_gameobject WHERE guid IN (\n";
	}
	elsif ($modeId eq 0)
	{
		print "DELETE FROM pool_creature WHERE guid IN (\n";
	}

	for my $row (@objRows)
	{
		if ($lastRow ne "")
		{
			print "$lastRow,\n";
		}
		$lastRow = "$row->[0]";
	}
	print "$lastRow);\n\n";
	$lastRow = "";

	# Delete old entries directly
	print "/* Delete old object entries */\n";
	if ($modeId eq 1)
	{
		print "DELETE FROM gameobject WHERE guid IN (\n";
	}
	elsif ($modeId eq 0)
	{
		print "DELETE FROM creature WHERE guid IN (\n";
	}

	for my $row (@objRows)
	{
		if ($lastRow ne "")
		{
			print "$lastRow,\n";
		}
		$lastRow = "$row->[0]";
	}
	print "$lastRow);\n\n";
	$lastRow = "";
	print "COMMIT;\n";

	# Disconnect from SQL
	$cnSQL->disconnect();